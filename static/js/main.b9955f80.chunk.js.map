{"version":3,"sources":["App.js","index.js","config.js"],"names":["GET_TODOS","gql","TOGGLE_TODO","ADD_TODO","DELETE_TODO","App","useState","todoText","setTodoText","useQuery","data","loading","error","useMutation","toggleTodo","onCompleted","addTodo","deleteTodo","a","id","done","variables","console","log","e","preventDefault","trim","text","refetchQueries","query","window","confirm","update","cache","newTodos","readQuery","todos","filter","todo","writeQuery","className","role","aria-label","onSubmit","type","placeholder","onChange","event","target","value","map","onClick","handleToggleTodo","handleDeleteTodo","client","ApolloClient","uri","InMemoryCache","then","result","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"8NAGMA,EAAYC,YAAH,2GAUTC,EAAcD,YAAH,qOAYXE,EAAWF,YAAH,8LAYRG,EAAcH,YAAH,8LA8FFI,I,EAAAA,EAlFf,WAEE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAiCC,YAAST,GAAlCU,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MACvB,EAAqBC,YAAYX,GAA1BY,EAAP,oBACA,EAAkBD,YAAYV,EAAU,CACtCY,YAAa,kBAAMP,EAAY,OAD1BQ,EAAP,oBAGA,EAAqBH,YAAYT,GAA1Ba,EAAP,oBARa,4CAUb,iCAAAC,EAAA,6DAAkCC,EAAlC,EAAkCA,GAAIC,EAAtC,EAAsCA,KAAtC,SAEqBN,EAAW,CAAEO,UAAW,CAACF,KAAIC,MAAOA,KAFzD,OAEQV,EAFR,OAIEY,QAAQC,IAAIb,GAJd,4CAVa,kEAkBb,WAA6Bc,GAA7B,eAAAN,EAAA,yDACEM,EAAEC,iBACElB,EAASmB,OAFf,iEAGqBV,EAAS,CAC1BK,UAAW,CAACM,KAAMpB,GAClBqB,eAAgB,CAAC,CAACC,MAAO7B,MAL7B,OAGQU,EAHR,OAOEY,QAAQC,IAAIb,GAPd,4CAlBa,kEA4Bb,+BAAAQ,EAAA,yDAAkCC,EAAlC,EAAkCA,IACZW,OAAOC,QAAQ,oCADrC,gCAGuBd,EAAW,CAC5BI,UAAW,CAAEF,MACba,OAAQ,SAAAC,GACN,IACMC,EADWD,EAAME,UAAW,CAACN,MAAO7B,IAChBoC,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKnB,KAAOA,KAC3Dc,EAAMM,WAAW,CAACV,MAAO7B,EAAWU,KAAM,CAAC0B,MAAOF,QAR1D,OAGUxB,EAHV,OAWIY,QAAQC,IAAIb,GAXhB,4CA5Ba,sBA4Cb,OAAGC,EAAgB,6CAChBC,EAAc,iDAEf,sBAAK4B,UAAU,iFAAf,UAEE,0CACW,IACT,sBAAMC,KAAK,MAAMC,aAAW,YAA5B,6BAGF,uBAAMF,UAAU,WAAWG,SAtDlB,4CAsDT,UACE,uBACEC,KAAK,OACLC,YAAY,aACZL,UAAU,SACVM,SAAU,SAAAC,GAAK,OAAIvC,EAAYuC,EAAMC,OAAOC,QAC5CA,MAAO1C,IAET,wBAAQqC,KAAK,SAASJ,UAAU,mCAAhC,uBAGF,qBAAKA,UAAU,+CAAf,SAEG9B,EAAK0B,MAAMc,KAAI,SAAAZ,GAAI,OACpB,oBAAiBa,QAAS,kBApEnB,2CAoEuBC,CAAiBd,IAA/C,UACE,sBAAME,UAAS,oCAA+BF,EAAKlB,MAAQ,UAA3D,SAAyEkB,EAAKX,OAC9E,wBAAQa,UAAU,+BAA+BW,QAAS,kBAtErD,2CAsEyDE,CAAiBf,IAA/E,SACE,sBAAME,UAAU,MAAhB,wBAHIF,EAAKnB,a,wBC7GfmC,EAAS,IAAIC,IAAa,CAC9BC,ICTmB,4DDUnBvB,MAAO,IAAIwB,MAGbH,EACGzB,MAAM,CACLA,MAAO5B,YAAF,+HAUNyD,MAAK,SAAAC,GAAM,OAAIrC,QAAQC,IAAIoC,MAE9BC,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBR,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEFS,SAASC,eAAe,W","file":"static/js/main.b9955f80.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport { useQuery, useMutation, gql } from '@apollo/client';\n\nconst GET_TODOS = gql`\n  query getTodos {\n    todos {\n      done\n      id\n      text\n    }\n  }\n`;\n\nconst TOGGLE_TODO = gql`\n  mutation toggleTodo($id: uuid!, $done: Boolean!) {\n    update_todos(where: {id: {_eq: $id }}, _set: {done: $done}) {\n      returning {\n        done\n        id\n        text\n      }\n    }\n  }\n`;\n\nconst ADD_TODO = gql`\n  mutation addTodo($text: String!) {\n    insert_todos(objects: {text: $text}) {\n      returning {\n        done\n        id\n        text\n      }\n    }\n  }\n`;\n\nconst DELETE_TODO = gql`\n  mutation deleteTodo($id: uuid!) {\n    delete_todos(where: {id: {_eq: $id}}) {\n      returning {\n        done\n        id\n        text\n      }\n    }\n  }\n`;\n\nfunction App() {\n\n  const [todoText, setTodoText] = useState(\"\");\n  const { data, loading, error } = useQuery(GET_TODOS);\n  const [toggleTodo] = useMutation(TOGGLE_TODO);\n  const [addTodo] = useMutation(ADD_TODO, {\n    onCompleted: () => setTodoText(\"\")\n  });\n  const [deleteTodo] = useMutation(DELETE_TODO);\n\n  async function handleToggleTodo({ id, done }){\n\n    const data = await toggleTodo({ variables: {id, done: !done} });\n\n    console.log(data);\n\n  }\n  \n  async function handleAddTodo(e){\n    e.preventDefault();\n    if(!todoText.trim()) return;\n    const data = await addTodo( {\n      variables: {text: todoText},\n      refetchQueries: [{query: GET_TODOS}]\n    } );\n    console.log(data);\n  }\n  \n  async function handleDeleteTodo({ id }){\n    const isConfirmed = window.confirm(\"Do you want to delete this todo?\");\n    if(isConfirmed){\n      const data = await deleteTodo({\n        variables: { id },\n        update: cache => {\n          const prevData = cache.readQuery( {query: GET_TODOS} )\n          const newTodos = prevData.todos.filter(todo => todo.id !== id );\n          cache.writeQuery({query: GET_TODOS, data: {todos: newTodos}})\n        }\n      });\n      console.log(data);\n    }\n    \n  }\n\n  if(loading) return <div>Loading...</div>; \n  if(error) return <div>Error Occured!</div>\n  return (\n    <div className=\"App vh-100 sans-serif flex flex-column items-center bg-mid-gray white pa3 fl-1\">\n\n      <h1>\n        Todo App{\" \"}\n        <span role=\"img\" aria-label=\"checkmark\">üìù</span>\n      </h1>\n\n      <form className=\"mb3 flex\" onSubmit = {handleAddTodo}>\n        <input \n          type=\"text\"\n          placeholder=\"add a todo\" \n          className=\"pa2 f4\" \n          onChange={event => setTodoText(event.target.value)}\n          value={todoText}>\n        </input>\n        <button type=\"submit\" className=\"pa2 ml2 f4 bg-navy white pointer\">Create</button>\n      </form>\n\n      <div className=\"flex flex-column items-center justify-center\">\n\n        {data.todos.map(todo => (\n        <p key={todo.id} onClick={()=>handleToggleTodo(todo)}>\n          <span className={`pointer list pa1 white f3 ${todo.done && \"strike\" }`}>{todo.text}</span>\n          <button className=\"bg-transparent bn f4 pointer\" onClick={()=>handleDeleteTodo(todo)}>\n            <span className=\"red\"> &times; </span>\n          </button>\n        </p>\n\n        ))}\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\nimport API_ENDPOINT from './config';\n\nconst client = new ApolloClient({\n  uri: API_ENDPOINT,\n  cache: new InMemoryCache()\n});\n\nclient\n  .query({\n    query: gql`\n    query getTodos {\n      todos {\n        done\n        id\n        text\n      }\n    }\n    `\n  })\n  .then(result => console.log(result));\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n","const API_ENDPOINT = \"https://react-todo-graphql-argon.herokuapp.com/v1/graphql\";\nexport default API_ENDPOINT;"],"sourceRoot":""}